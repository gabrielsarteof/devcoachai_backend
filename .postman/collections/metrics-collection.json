{
	"info": {
		"_postman_id": "m3tr-1c5a-4b2c-8d9e-f0123456789a",
		"name": "Journey - Metrics Module",
		"description": "Comprehensive test collection for the Journey Metrics Module.\n\n## Test Coverage\n- âœ… Metrics Tracking (POST /metrics) - 100% self-contained\n- âœ… Session Metrics Retrieval (GET /metrics/session/:attemptId) - 100% self-contained\n- âœ… Metrics Streaming (POST/DELETE /metrics/stream) - 100% self-contained\n- âœ… Error Handling & Validation - Domain error architecture\n\n## How to Run\n\n### Quick Start (All Tests)\n1. Ensure API is running: `npm run dev`\n2. Ensure seed is run: `npm run prisma:seed`\n3. Run collection - Setup creates test user automatically\n4. All tests will pass\n\n## Architecture Decision\n\n**Why this approach?**\n- âœ… Tests are 100% independent (best practice)\n- âœ… Tests validate domain error codes (METRIC_*)\n- âœ… Follows structured error architecture from last commit\n- âœ… Works seamlessly in CI/CD\n\n**Test User:**\n- Created automatically with timestamp\n- Role: JUNIOR_DEVELOPER (default)\n- Uses seeded challenge for attempts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "ðŸ”§ Setup (Run First)",
			"description": "Prepares test environment by creating test user and challenge attempt.\n\n**What happens:**\n1. Creates fresh test user\n2. Logs in to get access token\n3. Gets challenge from seed\n4. Starts a challenge attempt\n5. Sets up environment variables",
			"item": [
				{
					"name": "[POST] Create Test User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"const email = `metrics-test-user-${timestamp}@journey.test`;",
									"pm.collectionVariables.set('testUserEmail', email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test user created', function () {",
									"    pm.response.to.have.status(201);",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('userId', responseJson.data.user.id);",
									"});",
									"",
									"console.log('âœ… Test user created');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"password\": \"Test@123\",\n  \"name\": \"Metrics Test User\",\n  \"acceptTerms\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "[POST] Login Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User logged in', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('accessToken', responseJson.data.accessToken);",
									"});",
									"",
									"console.log('âœ… User authenticated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"password\": \"Test@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "[GET] Get Challenge from Seed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Challenge obtained', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.challenges).to.be.an('array').that.is.not.empty;",
									"    pm.environment.set('challengeId', responseJson.data.challenges[0].id);",
									"});",
									"",
									"console.log('âœ… Challenge ID obtained');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/challenges?limit=1",
							"host": ["{{baseUrl}}"],
							"path": ["challenges"],
							"query": [
								{"key": "limit", "value": "1"}
							]
						}
					}
				},
				{
					"name": "[POST] Start Challenge Attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Challenge attempt started', function () {",
									"    pm.response.to.have.status(201);",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('attemptId', responseJson.data.attemptId);",
									"    console.log('âœ… Stored attemptId:', responseJson.data.attemptId);",
									"});",
									"",
									"console.log('âœ… Challenge attempt started');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Authorization", "value": "Bearer {{accessToken}}"},
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"language\": \"javascript\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/challenges/{{challengeId}}/start",
							"host": ["{{baseUrl}}"],
							"path": ["challenges", "{{challengeId}}", "start"]
						}
					}
				}
			]
		},
		{
			"name": "ðŸ“Š Metrics Tracking",
			"description": "Track coding metrics during challenge attempts",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "[POST] Track Metrics Successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response has success structure', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('success', true);",
											"    pm.expect(responseJson).to.have.property('data');",
											"});",
											"",
											"pm.test('Metrics data is complete', function () {",
											"    const data = pm.response.json().data;",
											"    pm.expect(data).to.have.property('metricSnapshot');",
											"    pm.expect(data).to.have.property('calculation');",
											"    pm.expect(data).to.have.property('riskAssessment');",
											"    pm.expect(data).to.have.property('insights');",
											"});",
											"",
											"pm.test('Calculation includes DI, PR, CS', function () {",
											"    const calc = pm.response.json().data.calculation;",
											"    pm.expect(calc).to.have.property('dependencyIndex');",
											"    pm.expect(calc).to.have.property('passRate');",
											"    pm.expect(calc).to.have.property('checklistScore');",
											"    pm.expect(calc.dependencyIndex).to.equal(30);",
											"    pm.expect(calc.passRate).to.be.closeTo(66.67, 1);",
											"});",
											"",
											"pm.test('Risk assessment is valid', function () {",
											"    const risk = pm.response.json().data.riskAssessment;",
											"    pm.expect(risk).to.have.property('level');",
											"    pm.expect(risk).to.have.property('score');",
											"    pm.expect(risk).to.have.property('factors');",
											"    pm.expect(risk).to.have.property('recommendations');",
											"    pm.expect(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).to.include(risk.level);",
											"});",
											"",
											"console.log('âœ… Metrics tracked successfully');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"totalLines\": 100,\n  \"linesFromAI\": 30,\n  \"linesTyped\": 70,\n  \"copyPasteEvents\": 2,\n  \"deleteEvents\": 5,\n  \"testRuns\": 3,\n  \"testsPassed\": 2,\n  \"testsTotal\": 3,\n  \"checklistItems\": [\n    { \"id\": \"c1\", \"label\": \"Input Validation\", \"checked\": true, \"weight\": 1, \"category\": \"validation\" },\n    { \"id\": \"c2\", \"label\": \"Error Handling\", \"checked\": true, \"weight\": 2, \"category\": \"security\" },\n    { \"id\": \"c3\", \"label\": \"Unit Tests\", \"checked\": false, \"weight\": 1, \"category\": \"testing\" }\n  ],\n  \"sessionTime\": 300,\n  \"aiUsageTime\": 50,\n  \"manualCodingTime\": 200,\n  \"debugTime\": 50\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics",
									"host": ["{{baseUrl}}"],
									"path": ["metrics"]
								},
								"description": "Track coding metrics for a challenge attempt"
							}
						},
						{
							"name": "[POST] Track High-Risk Metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('High risk detected', function () {",
											"    const data = pm.response.json().data;",
											"    pm.expect(data.calculation.dependencyIndex).to.be.greaterThan(90);",
											"    pm.expect(data.calculation.passRate).to.be.lessThan(20);",
											"    pm.expect(['HIGH', 'CRITICAL']).to.include(data.riskAssessment.level);",
											"});",
											"",
											"console.log('âœ… High-risk metrics tracked');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"totalLines\": 100,\n  \"linesFromAI\": 95,\n  \"linesTyped\": 5,\n  \"copyPasteEvents\": 10,\n  \"deleteEvents\": 20,\n  \"testRuns\": 10,\n  \"testsPassed\": 1,\n  \"testsTotal\": 10,\n  \"checklistItems\": [\n    { \"id\": \"c1\", \"label\": \"Validation\", \"checked\": false, \"weight\": 1, \"category\": \"validation\" },\n    { \"id\": \"c2\", \"label\": \"Security\", \"checked\": false, \"weight\": 2, \"category\": \"security\" }\n  ],\n  \"sessionTime\": 300\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics",
									"host": ["{{baseUrl}}"],
									"path": ["metrics"]
								},
								"description": "Test high dependency, low pass rate scenario"
							}
						}
					]
				},
				{
					"name": "Error Handling",
					"item": [
						{
							"name": "[POST] Track Metrics - Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test('Error structure is correct', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('error');",
											"});",
											"",
											"console.log('âœ… Unauthorized error handled correctly');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"totalLines\": 100,\n  \"linesFromAI\": 30,\n  \"linesTyped\": 70,\n  \"copyPasteEvents\": 2,\n  \"deleteEvents\": 5,\n  \"testRuns\": 3,\n  \"testsPassed\": 2,\n  \"testsTotal\": 3,\n  \"checklistItems\": [],\n  \"sessionTime\": 300\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics",
									"host": ["{{baseUrl}}"],
									"path": ["metrics"]
								},
								"description": "Test authentication requirement"
							}
						},
						{
							"name": "[POST] Track Metrics - Invalid Attempt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test('Error code is METRIC_INVALID_ATTEMPT', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('code', 'METRIC_INVALID_ATTEMPT');",
											"    pm.expect(responseJson).to.have.property('statusCode', 403);",
											"});",
											"",
											"console.log('âœ… Invalid attempt error handled correctly');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"invalid-attempt-id\",\n  \"totalLines\": 100,\n  \"linesFromAI\": 30,\n  \"linesTyped\": 70,\n  \"copyPasteEvents\": 2,\n  \"deleteEvents\": 5,\n  \"testRuns\": 3,\n  \"testsPassed\": 2,\n  \"testsTotal\": 3,\n  \"checklistItems\": [],\n  \"sessionTime\": 300\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics",
									"host": ["{{baseUrl}}"],
									"path": ["metrics"]
								},
								"description": "Test invalid attempt validation"
							}
						},
						{
							"name": "[POST] Track Metrics - Validation Failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('Validation error returned', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(['METRIC_VALIDATION_FAILED', 'FST_ERR_VALIDATION']).to.include(responseJson.code);",
											"});",
											"",
											"console.log('âœ… Validation error handled correctly');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"totalLines\": -100,\n  \"linesFromAI\": -30,\n  \"linesTyped\": -70,\n  \"sessionTime\": -10\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics",
									"host": ["{{baseUrl}}"],
									"path": ["metrics"]
								},
								"description": "Test validation with negative values"
							}
						},
						{
							"name": "[POST] Track Metrics - Data Inconsistent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400 or 500', function () {",
											"    pm.expect([400, 500]).to.include(pm.response.code);",
											"});",
											"",
											"pm.test('Error indicates data inconsistency', function () {",
											"    const responseJson = pm.response.json();",
											"    if (pm.response.code === 400) {",
											"        pm.expect(['METRIC_VALIDATION_FAILED', 'FST_ERR_VALIDATION', 'METRIC_DATA_INCONSISTENT']).to.include(responseJson.code);",
											"    }",
											"});",
											"",
											"console.log('âœ… Data inconsistency handled');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"totalLines\": 50,\n  \"linesFromAI\": 75,\n  \"linesTyped\": 25,\n  \"copyPasteEvents\": 1,\n  \"deleteEvents\": 2,\n  \"testRuns\": 3,\n  \"testsPassed\": 5,\n  \"testsTotal\": 3,\n  \"checklistItems\": [],\n  \"sessionTime\": 300\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics",
									"host": ["{{baseUrl}}"],
									"path": ["metrics"]
								},
								"description": "Test data inconsistency (linesFromAI > totalLines, testsPassed > testsTotal)"
							}
						}
					]
				}
			]
		},
		{
			"name": "ðŸ“ˆ Session Metrics",
			"description": "Retrieve metrics for a challenge attempt session",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "[POST] Track Metrics for Session Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"console.log('âœ… Metrics tracked for session test');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"totalLines\": 100,\n  \"linesFromAI\": 30,\n  \"linesTyped\": 70,\n  \"copyPasteEvents\": 2,\n  \"deleteEvents\": 5,\n  \"testRuns\": 3,\n  \"testsPassed\": 2,\n  \"testsTotal\": 3,\n  \"checklistItems\": [\n    { \"id\": \"c1\", \"label\": \"Input Validation\", \"checked\": true, \"weight\": 1, \"category\": \"validation\" },\n    { \"id\": \"c2\", \"label\": \"Error Handling\", \"checked\": true, \"weight\": 2, \"category\": \"security\" },\n    { \"id\": \"c3\", \"label\": \"Unit Tests\", \"checked\": false, \"weight\": 1, \"category\": \"testing\" }\n  ],\n  \"sessionTime\": 300,\n  \"aiUsageTime\": 50,\n  \"manualCodingTime\": 200,\n  \"debugTime\": 50\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics",
									"host": ["{{baseUrl}}"],
									"path": ["metrics"]
								},
								"description": "Ensure metrics are tracked before retrieving session"
							}
						},
						{
							"name": "[GET] Get Session Metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test('Response has success structure', function () {",
											"    pm.expect(responseJson).to.have.property('success', true);",
											"    pm.expect(responseJson).to.have.property('data');",
											"});",
											"",
											"if (responseJson.success && responseJson.data) {",
											"    pm.test('Data structure is valid', function () {",
											"        const data = responseJson.data;",
											"        pm.expect(data).to.have.property('attempt');",
											"        pm.expect(data).to.have.property('metrics');",
											"        pm.expect(data).to.have.property('trends');",
											"        pm.expect(data).to.have.property('userAverages');",
											"        pm.expect(data).to.have.property('summary');",
											"    });",
											"    ",
											"    pm.test('Attempt details are complete', function () {",
											"        const attempt = responseJson.data.attempt;",
											"        pm.expect(attempt).to.have.property('id');",
											"        pm.expect(attempt).to.have.property('challengeTitle');",
											"        pm.expect(attempt).to.have.property('difficulty');",
											"        pm.expect(attempt).to.have.property('category');",
											"        pm.expect(attempt).to.have.property('status');",
											"    });",
											"    ",
											"    pm.test('Metrics is array', function () {",
											"        const metrics = responseJson.data.metrics;",
											"        pm.expect(metrics).to.be.an('array');",
											"    });",
											"    ",
											"    pm.test('Summary includes improvement data', function () {",
											"        const summary = responseJson.data.summary;",
											"        pm.expect(summary).to.have.property('totalTime');",
											"        pm.expect(summary).to.have.property('totalSnapshots');",
											"        pm.expect(summary).to.have.property('improvement');",
											"        pm.expect(summary.improvement).to.have.property('DI');",
											"        pm.expect(summary.improvement).to.have.property('PR');",
											"        pm.expect(summary.improvement).to.have.property('CS');",
											"    });",
											"    ",
											"    pm.test('User averages are present', function () {",
											"        const avg = responseJson.data.userAverages;",
											"        pm.expect(avg).to.have.property('averageDI');",
											"        pm.expect(avg).to.have.property('averagePR');",
											"        pm.expect(avg).to.have.property('averageCS');",
											"    });",
											"}",
											"",
											"console.log('âœ… Session metrics retrieved successfully');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/session/{{attemptId}}",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "session", "{{attemptId}}"]
								},
								"description": "Get metrics for a specific attempt session"
							}
						}
					]
				},
				{
					"name": "Error Handling",
					"item": [
						{
							"name": "[GET] Get Session Metrics - Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test('Unauthorized error returned', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('error');",
											"});",
											"",
											"console.log('âœ… Unauthorized error handled');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/session/{{attemptId}}",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "session", "{{attemptId}}"]
								},
								"description": "Test authentication requirement"
							}
						},
						{
							"name": "[GET] Get Session Metrics - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test('Error code is METRIC_ATTEMPT_NOT_FOUND', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('code', 'METRIC_ATTEMPT_NOT_FOUND');",
											"    pm.expect(responseJson).to.have.property('statusCode', 404);",
											"});",
											"",
											"console.log('âœ… Not found error handled');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/session/cuid-that-does-not-exist",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "session", "cuid-that-does-not-exist"]
								},
								"description": "Test error handling for non-existent attempt"
							}
						}
					]
				}
			]
		},
		{
			"name": "ðŸ”„ Metrics Streaming",
			"description": "Start and stop real-time metrics streaming",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "[POST] Start Metrics Stream",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Stream started successfully', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('success', true);",
											"    pm.expect(responseJson).to.have.property('message', 'Metrics stream started');",
											"});",
											"",
											"console.log('âœ… Metrics stream started');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"interval\": 5000\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics/stream",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "stream"]
								},
								"description": "Start real-time metrics streaming"
							}
						},
						{
							"name": "[DELETE] Stop Metrics Stream",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"console.log('âœ… Metrics stream stopped');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/stream/{{attemptId}}",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "stream", "{{attemptId}}"]
								},
								"description": "Stop metrics streaming"
							}
						}
					]
				},
				{
					"name": "Error Handling",
					"item": [
						{
							"name": "[POST] Start Stream - Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test('Unauthorized error returned', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('error');",
											"});",
											"",
											"console.log('âœ… Unauthorized error handled');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"{{attemptId}}\",\n  \"interval\": 5000\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics/stream",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "stream"]
								},
								"description": "Test authentication requirement"
							}
						},
						{
							"name": "[POST] Start Stream - Validation Failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('Validation error returned', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(['METRIC_VALIDATION_FAILED', 'FST_ERR_VALIDATION']).to.include(responseJson.code);",
											"});",
											"",
											"console.log('âœ… Validation error handled');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"},
									{"key": "Content-Type", "value": "application/json"}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attemptId\": \"invalid-id\",\n  \"interval\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/metrics/stream",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "stream"]
								},
								"description": "Test validation with invalid data types"
							}
						},
						{
							"name": "[DELETE] Stop Stream - Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test('Unauthorized error returned', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('error');",
											"});",
											"",
											"console.log('âœ… Unauthorized error handled');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/stream/{{attemptId}}",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "stream", "{{attemptId}}"]
								},
								"description": "Test authentication requirement"
							}
						},
						{
							"name": "[DELETE] Stop Stream - Invalid Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('Error code is METRIC_VALIDATION_FAILED', function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('code', 'METRIC_VALIDATION_FAILED');",
											"});",
											"",
											"console.log('âœ… Validation error handled');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{"key": "Authorization", "value": "Bearer {{accessToken}}"}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/stream/invalid-id",
									"host": ["{{baseUrl}}"],
									"path": ["metrics", "stream", "invalid-id"]
								},
								"description": "Test validation with invalid attemptId format"
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log('Running request to:', pm.request.url);",
					"",
					"if (!pm.request.headers.has('Content-Type') && pm.request.body && pm.request.body.mode === 'raw') {",
					"    pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Content-Type is JSON', function () {",
					"    if (pm.response.code !== 204) {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    }",
					"});",
					"",
					"pm.test('Response structure is consistent', function () {",
					"    if (pm.response.code !== 204 && pm.response.text()) {",
					"        const responseJson = pm.response.json();",
					"        ",
					"        if (pm.response.code >= 200 && pm.response.code < 300) {",
					"            pm.expect(responseJson).to.have.property('success');",
					"        }",
					"        ",
					"        if (pm.response.code >= 400) {",
					"            pm.expect(responseJson).to.have.property('error');",
					"        }",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "collectionVersion",
			"value": "1.0.0",
			"type": "string"
		},
		{
			"key": "timestamp",
			"value": "{{$timestamp}}",
			"type": "string"
		}
	]
}
